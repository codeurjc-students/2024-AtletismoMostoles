config:
  target: "{{ $env.TARGET_API }}"
  tls:
    rejectUnauthorized: false
  phases:
    - duration: 60
      arrivalRate: 2
      name: warmup
    - duration: 180
      arrivalRate: 8
      rampTo: 25
      name: ramp
    - duration: 300
      arrivalRate: 25
      name: peak
  plugins:
    metrics-by-endpoint: {}
  processor: "./processors.js"
  defaults:
    headers:
      Content-Type: application/json
  ensure:
    thresholds:
      - http.response_time.p95: 2000   # 2 s
      - http.requests: 1               # evita 0 req por error de config
      - http.codes.200: 1

scenarios:
  - name: login-and-browse
    flow:
      # 1) Login (processors.js captura el JWT y lo añade a siguientes requests)
      - post:
          url: "/api/auth/login"
          json:
            username: "{{ $env.USERNAME }}"
            password: "{{ $env.PASSWORD }}"
          expect:
            - statusCode: 200

      # 2) Listar eventos (paginación aleatoria)
      - get:
          url: "/api/events?page={{ $randomNumber(0, 5) }}&size=10"
          expect:
            - statusCode: 200
      - think: 1

      # 3) (Opcional) Buscar/filtrar si tu API lo soporta
      - get:
          url: "/api/events?organizedByClub=true&page={{ $randomNumber(0, 3) }}&size=10"
          expect:
            - statusCode: 200
      - think: 1

      # 4) (Opcional) Detalle de evento si existe endpoint /api/events/{id}
      #    Para no depender de IDs reales, hacemos una llamada inocua repetida.
      - get:
          url: "/api/events?page=0&size=1"
          expect:
            - statusCode: 200
      - think: 1
