name: CD to AKS

on:
  push:
    branches:
       - main
  workflow_dispatch:

concurrency:
  group: aks-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKERHUB_USER: saac04
  REGISTRY: docker.io
  IMAGE_TAG: ${{ github.sha }}
  LATEST_TAG: latest
  K8S_NAMESPACE: default

jobs:
  build_and_push:
    name: Build & Push to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push frontend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/frontend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USER }}/frontend:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USER }}/frontend:${{ env.LATEST_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push service1-backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/service1/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USER }}/service1-backend:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USER }}/service1-backend:${{ env.LATEST_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push service2-result
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/service2/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USER }}/service2-result:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USER }}/service2-result:${{ env.LATEST_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push service3-events
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/service3/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USER }}/service3-events:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USER }}/service3-events:${{ env.LATEST_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Update AKS Deployments
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Write kubeconfig from secret
        run: |
          echo "${{ secrets.KUBECONFIG_GHA }}" > $HOME/kubeconfig
          chmod 600 $HOME/kubeconfig
          echo "KUBECONFIG=$HOME/kubeconfig" >> $GITHUB_ENV

      - name: Detect Docker Hub creds
        id: dh
        env:
          DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DH_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          if [ -n "$DH_USER" ] && [ -n "$DH_TOKEN" ]; then
            echo "present=true" >> $GITHUB_OUTPUT
          else
            echo "present=false" >> $GITHUB_OUTPUT
          fi

      - name: Upsert imagePullSecret (only if private repos)
        if: ${{ steps.dh.outputs.present == 'true' }}
        run: |
          NS="${{ env.K8S_NAMESPACE }}"
          kubectl -n "$NS" create secret docker-registry dockerhub-cred \
            --docker-server=https://index.docker.io/v1/ \
            --docker-username="${{ secrets.DOCKERHUB_USERNAME }}" \
            --docker-password="${{ secrets.DOCKERHUB_TOKEN }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Set images
        env:
          NS: ${{ env.K8S_NAMESPACE }}
          REG: ${{ format('{0}/{1}', env.REGISTRY, env.DOCKERHUB_USER) }}
          TAG: ${{ env.IMAGE_TAG }}
        run: |
          kubectl -n "$NS" set image deploy/frontend          frontend=${REG}/frontend:${TAG}
          kubectl -n "$NS" set image deploy/service1-backend  service1-backend=${REG}/service1-backend:${TAG}
          kubectl -n "$NS" set image deploy/service2-backend  service2-backend=${REG}/service2-result:${TAG}
          kubectl -n "$NS" set image deploy/service3-backend  service3-backend=${REG}/service3-events:${TAG}

      - name: Wait for rollouts
        env:
          NS: ${{ env.K8S_NAMESPACE }}
        run: |
          kubectl -n "$NS" rollout status deploy/frontend --timeout=300s
          kubectl -n "$NS" rollout status deploy/service1-backend --timeout=300s
          kubectl -n "$NS" rollout status deploy/service2-backend --timeout=300s
          kubectl -n "$NS" rollout status deploy/service3-backend --timeout=300s
