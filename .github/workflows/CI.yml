name: CI Pipeline

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

jobs:
  setup-and-test:
    name: Setup and Run Tests
    runs-on: ubuntu-latest  

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # ----------------------------
      # Start backend with Docker Compose
      # ----------------------------
      - name: Check Docker installation
        run: |
          docker --version
          docker info

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Bring up containers
        run: |
          cd docker
          docker-compose up -d

      - name: Wait for backend to start
        run: sleep 15

      - name: List running containers
        run: docker ps -a

      - name: Test backend connectivity
        run: curl -k https://localhost:443/api/auth/login || echo "Cannot connect to backend"

      # ----------------------------
      # Java / Maven setup
      # ----------------------------
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # ----------------------------
      # Install Chrome & ChromeDriver for Selenium E2E
      # ----------------------------
      - name: Install Google Chrome and ChromeDriver
        run: |
          sudo apt update
          sudo apt install -y wget curl unzip google-chrome-stable
          
          CHROMEDRIVER_VERSION="133.0.6943.126"
          echo "Instalando ChromeDriver versión: $CHROMEDRIVER_VERSION"
          wget -N "https://storage.googleapis.com/chrome-for-testing-public/$CHROMEDRIVER_VERSION/linux64/chromedriver-linux64.zip"
          unzip chromedriver-linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

      - name: Set ChromeDriver environment variables
        run: |
          echo "webdriver.chrome.driver=/usr/local/bin/chromedriver" >> $GITHUB_ENV
          echo "WEBDRIVER_CHROME_DRIVER=/usr/local/bin/chromedriver" >> $GITHUB_ENV

      - name: Configure headless Chrome options
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
              echo "CHROME_OPTIONS=--headless --no-sandbox --disable-dev-shm-usage --disable-gpu --window-size=1920,1080" >> $GITHUB_ENV
          fi
          
      - name: Verify Chrome & ChromeDriver versions
        run: |
          google-chrome --version
          chromedriver --version

      # ----------------------------
      # Run all backend tests (unit, REST API, and E2E)
      # ----------------------------
      - name: Run API REST Tests with Maven
        run: |
          cd backend
          mvn clean test -Dtest="com.example.TFG_WebApp.API_REST_TESTs.**"

      - name: Run E2E Tests with Maven
        run: |
          cd backend
          mvn clean test -Dtest="com.example.TFG_WebApp.E2E_TESTs.**"

      - name: Run Unit Tests with Maven
        run: |
          cd backend
          mvn clean test -Dtest="com.example.TFG_WebApp.Unit_TESTs.**"
          
      # ----------------------------
      # Angular Frontend
      # ----------------------------
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run Angular unit tests and collect coverage
        working-directory: frontend
        run: npm test -- --watch=false --browsers=ChromeHeadless --code-coverage

      # ----------------------------
      # SonarCloud Analysis (CLI)
      # ----------------------------
      - name: Download and unzip SonarScanner CLI
        run: |
          wget -O scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
          unzip scanner.zip
          echo "SONAR_SCANNER_HOME=$(pwd)/sonar-scanner-4.7.0.2747-linux" >> $GITHUB_ENV

      - name: Run SonarScanner
        env:
          SONAR_TOKEN: 4dd5c6a7ea10044d985b5bf2ff03c431625e8088 
        run: |
          echo "Java antes de override: $(java -version)"
          export PATH="$JAVA_HOME/bin:$PATH"
          echo "Java después de override: $(java -version)"
          
          # Invocamos directamente el binario del scanner
          $SONAR_SCANNER_HOME/bin/sonar-scanner \
            -D "sonar.host.url=https://sonarcloud.io" \
            -D "sonar.login=${SONAR_TOKEN}"

