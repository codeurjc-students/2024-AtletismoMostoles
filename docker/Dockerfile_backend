# Etapa de construcción del frontend (Angular)
FROM node:18-alpine AS frontend_build
WORKDIR /app

# Copiar y construir el frontend
COPY frontend/package.json frontend/package-lock.json ./
RUN npm install
COPY frontend/. .
RUN npm run build --configuration=production --project=frontend

# Etapa de construcción del backend (Spring Boot)
FROM eclipse-temurin:17-jdk-alpine AS backend_build
WORKDIR /app

# Instalar herramientas necesarias para ejecutar `mvnw` correctamente en Alpine
RUN apk add --no-cache bash dos2unix

# Copiar archivos del backend
COPY backend/pom.xml .
COPY backend/src ./src
COPY backend/mvnw ./mvnw
COPY backend/.mvn .mvn

# Convertir `mvnw` a formato UNIX y darle permisos de ejecución
RUN dos2unix mvnw
RUN chmod +x mvnw

# Ejecutar Maven para compilar el proyecto
RUN ./mvnw package -DskipTests

# Etapa final: Ejecutar el backend con el frontend incluido
FROM eclipse-temurin:17-jre-alpine
WORKDIR /app

# Copiar el JAR compilado del backend
COPY --from=backend_build /app/target/*.jar app.jar

# Copiar el frontend compilado en la carpeta estática de Spring Boot
RUN mkdir -p /app/public
COPY --from=frontend_build /app/dist/frontend/browser /app/public


# Configurar Spring Boot para servir los archivos estáticos
ENV SPRING_RESOURCES_STATIC_LOCATIONS=file:/app/public/

# Exponer el puerto 443 para HTTPS
EXPOSE 443

# Configurar la base de datos
ENV SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/tfg_db
ENV SPRING_DATASOURCE_USERNAME=root
ENV SPRING_DATASOURCE_PASSWORD=29042002Sa

# Ejecutar la aplicación
ENTRYPOINT ["java", "-jar", "app.jar"]
